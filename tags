!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
And	lib/definition/dsl.rb	/^    def And(*definitions) # rubocop:disable Naming\/MethodName$/;"	f	class:Definition.Dsl
And	lib/definition/types/and.rb	/^    class And < Base$/;"	c	class:Definition.Types
Base	lib/definition/types/base.rb	/^    class Base$/;"	c	class:Definition.Types
CoercibleType	lib/definition/dsl.rb	/^    def CoercibleType(klass) # rubocop:disable Naming\/MethodName$/;"	f	class:Definition.Dsl
Comparators	lib/definition/dsl/comparators.rb	/^    module Comparators$/;"	m	class:Definition.Dsl
ConformError	lib/definition/conform_error.rb	/^  class ConformError$/;"	c	class:Definition
ConformResult	lib/definition/conform_result.rb	/^  class ConformResult$/;"	c	class:Definition
Conformer	lib/definition/types/and.rb	/^      class Conformer$/;"	c	class:Definition.Types.And
Conformer	lib/definition/types/each.rb	/^      class Conformer$/;"	c	class:Definition.Types.Each
Conformer	lib/definition/types/include.rb	/^      class Conformer$/;"	c	class:Definition.Types.Include
Conformer	lib/definition/types/keys.rb	/^      class Conformer$/;"	c	class:Definition.Types.Keys
Conformer	lib/definition/types/or.rb	/^      class Conformer$/;"	c	class:Definition.Types.Or
Definition	lib/definition.rb	/^module Definition$/;"	m
Definition	lib/definition/conform_error.rb	/^module Definition$/;"	m
Definition	lib/definition/conform_result.rb	/^module Definition$/;"	m
Definition	lib/definition/dsl.rb	/^module Definition$/;"	m
Definition	lib/definition/dsl/comparators.rb	/^module Definition$/;"	m
Definition	lib/definition/dsl/nil.rb	/^module Definition$/;"	m
Definition	lib/definition/key_conform_error.rb	/^module Definition$/;"	m
Definition	lib/definition/types/and.rb	/^module Definition$/;"	m
Definition	lib/definition/types/base.rb	/^module Definition$/;"	m
Definition	lib/definition/types/each.rb	/^module Definition$/;"	m
Definition	lib/definition/types/include.rb	/^module Definition$/;"	m
Definition	lib/definition/types/keys.rb	/^module Definition$/;"	m
Definition	lib/definition/types/lambda.rb	/^module Definition$/;"	m
Definition	lib/definition/types/or.rb	/^module Definition$/;"	m
Definition	lib/definition/types/type.rb	/^module Definition$/;"	m
Definition	lib/definition/value_object.rb	/^module Definition$/;"	m
Definition	lib/definition/version.rb	/^module Definition$/;"	m
Dsl	lib/definition/dsl.rb	/^  module Dsl$/;"	m	class:Definition
Dsl	lib/definition/dsl/comparators.rb	/^  module Dsl$/;"	m	class:Definition
Dsl	lib/definition/dsl/nil.rb	/^  module Dsl$/;"	m	class:Definition
Dsl	lib/definition/types/and.rb	/^      module Dsl$/;"	m	class:Definition.Types.And
Dsl	lib/definition/types/keys.rb	/^      module Dsl$/;"	m	class:Definition.Types.Keys
Dsl	lib/definition/types/lambda.rb	/^      module Dsl$/;"	m	class:Definition.Types.Lambda
Dsl	lib/definition/types/or.rb	/^      module Dsl$/;"	m	class:Definition.Types.Or
Each	lib/definition/dsl.rb	/^    def Each(definition) # rubocop:disable Naming\/MethodName$/;"	f	class:Definition
Each	lib/definition/types/each.rb	/^    class Each < Base$/;"	c	class:Definition.Types
Empty	lib/definition/dsl/comparators.rb	/^      def Empty # rubocop:disable Naming\/MethodName$/;"	f
Enum	lib/definition/dsl.rb	/^    def Enum(*allowed_values) # rubocop:disable Naming\/MethodName$/;"	f	class:Definition.Dsl
Equal	lib/definition/dsl/comparators.rb	/^      def Equal(expected_value) # rubocop:disable Naming\/MethodName$/;"	f
GreaterThen	lib/definition/dsl/comparators.rb	/^      def GreaterThen(min_value) # rubocop:disable Naming\/MethodName$/;"	f	class:Definition.Dsl.Comparators
GreaterThenEqual	lib/definition/dsl/comparators.rb	/^      def GreaterThenEqual(min_value) # rubocop:disable Naming\/MethodName$/;"	f	class:Definition.Dsl
Include	lib/definition/types/include.rb	/^    class Include < Base$/;"	c	class:Definition.Types
InvalidValueObjectError	lib/definition/value_object.rb	/^  class InvalidValueObjectError < StandardError; end$/;"	c	class:Definition
JsonApiRequestHandler	spec/integration/usecases/jsonapi_spec.rb	/^  class JsonApiRequestHandler$/;"	c
KeyConformError	lib/definition/key_conform_error.rb	/^  class KeyConformError < ConformError$/;"	c	class:Definition
Keys	lib/definition/dsl.rb	/^    def Keys(&block) # rubocop:disable Naming\/MethodName$/;"	f	class:Definition.Dsl
Keys	lib/definition/types/keys.rb	/^    class Keys < Base$/;"	c	class:Definition.Types
Lambda	lib/definition/dsl.rb	/^    def Lambda(name, &block) # rubocop:disable Naming\/MethodName$/;"	f	class:Definition.Dsl
Lambda	lib/definition/types/lambda.rb	/^    class Lambda < Base$/;"	c	class:Definition.Types
LessThen	lib/definition/dsl/comparators.rb	/^      def LessThen(max_value) # rubocop:disable Naming\/MethodName$/;"	f	class:Definition
LessThenEqual	lib/definition/dsl/comparators.rb	/^      def LessThenEqual(max_value) # rubocop:disable Naming\/MethodName$/;"	f
MaxSize	lib/definition/dsl/comparators.rb	/^      def MaxSize(max_size) # rubocop:disable Naming\/MethodName$/;"	f	class:Definition.Dsl.Comparators
MinSize	lib/definition/dsl/comparators.rb	/^      def MinSize(min_size) # rubocop:disable Naming\/MethodName$/;"	f	class:Definition.Dsl.Comparators
Nil	lib/definition/dsl/nil.rb	/^      def Nil # rubocop:disable Naming\/MethodName$/;"	f	class:Definition.Dsl.Nil
Nil	lib/definition/dsl/nil.rb	/^    module Nil$/;"	m	class:Definition.Dsl
NonEmpty	lib/definition/dsl/comparators.rb	/^      def NonEmpty # rubocop:disable Naming\/MethodName$/;"	f
NonEmptyString	lib/definition/dsl/comparators.rb	/^      def NonEmptyString # rubocop:disable Naming\/MethodName$/;"	f	class:Definition.Dsl.Comparators
NotConfiguredError	lib/definition/value_object.rb	/^  class NotConfiguredError < StandardError; end$/;"	c	class:Definition
Or	lib/definition/dsl.rb	/^    def Or(*definitions) # rubocop:disable Naming\/MethodName$/;"	f	class:Definition.Dsl
Or	lib/definition/types/or.rb	/^    class Or < Base$/;"	c	class:Definition.Types
Regex	lib/definition/dsl/comparators.rb	/^      def Regex(regex, name: :regex) # rubocop:disable Naming\/MethodName$/;"	f
SpecHelpers	spec/support/spec_helpers.rb	/^module SpecHelpers$/;"	m
TestArrayValueObject	spec/lib/definition/value_object_spec.rb	/^    class TestArrayValueObject < described_class$/;"	c
TestKeysValueObject	spec/lib/definition/value_object_spec.rb	/^    class TestKeysValueObject < described_class$/;"	c
TestUnconfiguredValueObject	spec/lib/definition/value_object_spec.rb	/^    class TestUnconfiguredValueObject < described_class; end$/;"	c
Type	lib/definition/dsl.rb	/^    def Type(klass) # rubocop:disable Naming\/MethodName$/;"	f	class:Definition.Dsl
Type	lib/definition/types/type.rb	/^    class Type < Base$/;"	c	class:Definition.Types
Types	lib/definition/types/and.rb	/^  module Types$/;"	m	class:Definition
Types	lib/definition/types/base.rb	/^  module Types$/;"	m	class:Definition
Types	lib/definition/types/each.rb	/^  module Types$/;"	m	class:Definition
Types	lib/definition/types/include.rb	/^  module Types$/;"	m	class:Definition
Types	lib/definition/types/keys.rb	/^  module Types$/;"	m	class:Definition
Types	lib/definition/types/lambda.rb	/^  module Types$/;"	m	class:Definition
Types	lib/definition/types/or.rb	/^  module Types$/;"	m	class:Definition
Types	lib/definition/types/type.rb	/^  module Types$/;"	m	class:Definition
ValueObject	lib/definition/value_object.rb	/^  class ValueObject < SimpleDelegator$/;"	c	class:Definition
add_extra_key_errors	lib/definition/types/keys.rb	/^        def add_extra_key_errors$/;"	f	class:Definition.Types.Keys.Conformer
add_missing_key_errors	lib/definition/types/keys.rb	/^        def add_missing_key_errors$/;"	f	class:Definition.Types.Keys.Conformer
all_keys	lib/definition/types/keys.rb	/^        def all_keys$/;"	f	class:Definition.Types.Keys.Conformer
assign_parents	lib/definition/conform_error.rb	/^    def assign_parents$/;"	f	class:Definition.ConformError.error_path
assign_parents	lib/definition/key_conform_error.rb	/^    def assign_parents$/;"	f	class:Definition.KeyConformError.error_key_path
conform	lib/definition/types/and.rb	/^        def conform(value)$/;"	f	class:Definition.Types.And.Conformer
conform	lib/definition/types/and.rb	/^      def conform(value)$/;"	f	class:Definition.Types.And
conform	lib/definition/types/base.rb	/^      def conform(_value)$/;"	f	class:Definition.Types.Base
conform	lib/definition/types/each.rb	/^        def conform(value)$/;"	f	class:Definition.Types.Each.Conformer
conform	lib/definition/types/each.rb	/^      def conform(value)$/;"	f	class:Definition.Types.Each
conform	lib/definition/types/include.rb	/^        def conform(value)$/;"	f	class:Definition.Types.Include.Conformer
conform	lib/definition/types/include.rb	/^      def conform(value)$/;"	f	class:Definition.Types.Include
conform	lib/definition/types/keys.rb	/^        def conform$/;"	f	class:Definition.Types.Keys.Conformer
conform	lib/definition/types/keys.rb	/^      def conform(value)$/;"	f	class:Definition.Types.Keys
conform	lib/definition/types/lambda.rb	/^      def conform(value)$/;"	f	class:Definition.Types.Lambda
conform	lib/definition/types/or.rb	/^        def conform(value)$/;"	f	class:Definition.Types.Or.Conformer
conform	lib/definition/types/or.rb	/^      def conform(value)$/;"	f	class:Definition.Types.Or
conform	lib/definition/types/type.rb	/^      def conform(value)$/;"	f	class:Definition.Types.Type
conform	lib/definition/value_object.rb	/^      def conform(value)$/;"	f	class:Definition.ValueObject
conform_all	lib/definition/types/and.rb	/^        def conform_all(value)$/;"	f	class:Definition.Types.And.Conformer
conform_all	lib/definition/types/each.rb	/^        def conform_all(values)$/;"	f	class:Definition.Types.Each.Conformer
conform_all_keys	lib/definition/types/keys.rb	/^        def conform_all_keys$/;"	f	class:Definition.Types.Keys.Conformer
conform_definitions	lib/definition/types/keys.rb	/^        def conform_definitions(keys)$/;"	f	class:Definition.Types.Keys.Conformer
conform_with	lib/definition/types/lambda.rb	/^        def conform_with(value)$/;"	f	class:Definition.Types.Lambda.Dsl
conforming_definition	spec/support/spec_helpers.rb	/^  def conforming_definition(value)$/;"	f	class:SpecHelpers
define_accessor_methods	lib/definition/value_object.rb	/^      def define_accessor_methods$/;"	f	class:Definition.ValueObject
definition	lib/definition/value_object.rb	/^      def definition(definition)$/;"	f	class:Definition.ValueObject
error_key_path	lib/definition/key_conform_error.rb	/^    def error_key_path$/;"	f	class:Definition.KeyConformError
error_message	lib/definition/conform_result.rb	/^    def error_message$/;"	f	class:Definition.ConformResult
error_path	lib/definition/conform_error.rb	/^    def error_path$/;"	f	class:Definition.ConformError
errors	lib/definition/types/each.rb	/^        def errors(results)$/;"	f	class:Definition.Types.Each.Conformer
errors	spec/integration/usecases/jsonapi_spec.rb	/^    def self.errors(request_body)$/;"	F	class:JsonApiRequestHandler
explain	lib/definition/types/base.rb	/^      def explain(value)$/;"	f	class:Definition.Types.Base
failing_definition	spec/support/spec_helpers.rb	/^  def failing_definition(value, error_message)$/;"	f	class:SpecHelpers
first_successful_conform_or_errors	lib/definition/types/or.rb	/^        def first_successful_conform_or_errors(value)$/;"	f	class:Definition.Types.Or.Conformer
gather_errors	lib/definition/types/include.rb	/^        def gather_errors(value)$/;"	f	class:Definition.Types.Include.Conformer
initialize	lib/definition/conform_error.rb	/^    def initialize(definition, message, sub_errors: [], parent: nil)$/;"	f	class:Definition.ConformError
initialize	lib/definition/conform_result.rb	/^    def initialize(value, errors: [])$/;"	f	class:Definition.ConformResult
initialize	lib/definition/key_conform_error.rb	/^    def initialize(definition, message, key:, sub_errors: [], parent: nil)$/;"	f	class:Definition.KeyConformError
initialize	lib/definition/types/and.rb	/^        def initialize(definition)$/;"	f	class:Definition.Types.And.Conformer
initialize	lib/definition/types/and.rb	/^      def initialize(name, *args)$/;"	f	class:Definition.Types.And
initialize	lib/definition/types/base.rb	/^      def initialize(name, descriptions: {})$/;"	f	class:Definition.Types.Base
initialize	lib/definition/types/each.rb	/^        def initialize(definition)$/;"	f	class:Definition.Types.Each.Conformer
initialize	lib/definition/types/each.rb	/^      def initialize(name, definition:)$/;"	f	class:Definition.Types.Each
initialize	lib/definition/types/include.rb	/^        def initialize(definition)$/;"	f	class:Definition.Types.Include.Conformer
initialize	lib/definition/types/include.rb	/^      def initialize(name, *args)$/;"	f	class:Definition.Types.Include
initialize	lib/definition/types/keys.rb	/^        def initialize(definition, value)$/;"	f	class:Definition.Types.Keys.Conformer
initialize	lib/definition/types/keys.rb	/^      def initialize(name, req: {}, opt: {})$/;"	f	class:Definition.Types.Keys
initialize	lib/definition/types/lambda.rb	/^      def initialize(name, descriptions: {}, &test_lambda)$/;"	f	class:Definition.Types.Lambda
initialize	lib/definition/types/or.rb	/^        def initialize(definition)$/;"	f	class:Definition.Types.Or.Conformer
initialize	lib/definition/types/or.rb	/^      def initialize(name, *args)$/;"	f	class:Definition.Types.Or
initialize	lib/definition/types/type.rb	/^      def initialize(name, klass, &coerce)$/;"	f	class:Definition.Types.Type
initialize	lib/definition/value_object.rb	/^    def initialize(args = nil, **kwargs)$/;"	f	class:Definition.ValueObject
json_pointer	lib/definition/conform_error.rb	/^    def json_pointer$/;"	f	class:Definition.ConformError.error_path
keys	lib/definition/types/keys.rb	/^      def keys$/;"	f	class:Definition.Types.Keys
leaf_errors	lib/definition/conform_result.rb	/^    def leaf_errors$/;"	f	class:Definition.ConformResult
leafes	lib/definition/conform_error.rb	/^    def leafes$/;"	f	class:Definition.ConformError.error_path
message	lib/definition/conform_error.rb	/^    def message$/;"	f	class:Definition.ConformError
non_array_error	lib/definition/types/each.rb	/^        def non_array_error(value)$/;"	f	class:Definition.Types.Each.Conformer
optional	lib/definition/types/keys.rb	/^        def optional(key, definition)$/;"	f	class:Definition.Types.Keys.Dsl
optional_definitions	lib/definition/types/keys.rb	/^        def optional_definitions$/;"	f	class:Definition.Types.Keys.Conformer
optional_keys	lib/definition/types/keys.rb	/^        def optional_keys$/;"	f	class:Definition.Types.Keys.Conformer
passed?	lib/definition/conform_result.rb	/^    def passed?$/;"	f	class:Definition.ConformResult
required	lib/definition/types/keys.rb	/^        def required(key, definition)$/;"	f	class:Definition.Types.Keys.Dsl
required_definitions	lib/definition/types/keys.rb	/^        def required_definitions$/;"	f	class:Definition.Types.Keys.Conformer
required_keys	lib/definition/types/keys.rb	/^        def required_keys$/;"	f	class:Definition.Types.Keys.Conformer
translated_error	lib/definition/conform_error.rb	/^    def translated_error(namespace = "definition", vars: {})$/;"	f	class:Definition.ConformError.error_path
try_conform	lib/definition/types/type.rb	/^      def try_conform(value)$/;"	f	class:Definition.Types.Type
valid?	lib/definition/types/type.rb	/^      def valid?(value)$/;"	f	class:Definition.Types.Type
validate	lib/definition/types/and.rb	/^        def validate(definition)$/;"	f	class:Definition.Types.And.Dsl
validate	lib/definition/types/or.rb	/^        def validate(definition)$/;"	f	class:Definition.Types.Or.Dsl
